<?php
	header("content-type:text/html;charset=utf-8");
/*	class Cat{
		public $name;
		public $age;
		public $color;
	}
	$cat1 = new Cat();
	$cat1->name = '小白';
	$cat1->age = 3;
	$cat1->color = '白色';
	
	var_dump($cat1);

	echo '<br/>';
	echo '小猫的信息如下';
	echo '<br/>姓名:'.$cat1->name;
	echo '<br/>年龄:'.$cat1->age;
	echo '<br/>毛色:'.$cat1->color;
*/
/*****************************************
上述代码说明:
	1.class 是一个关键字,表示这是一个类,不能修改
	2.public $name 是一个成员属性,当我们在类定义的{} 中定义的一个变量,就是成员属性
	3.public 时访问修饰符,用于控制成员属性与成员变量的访问范围,还有protected,private
	4.$cat1 = new Cat(); 叫实例化一个对象,$cat1 就是一个对象, new 是关键字,表示新创建的一个对象,
	5.$cat1->name = '小白' 表示给成员属性赋值,->符号叫做对象运算符
	6.当我们需要看一个对象的情况时,可以通过var_dump()函数来查看对象输出情况;
******************************************/
//类与对象的关系

// 1.定义类

//类名的规范说明:
//(1.) 类名的命名规范会死大驼峰eg->$CatName  [小驼峰 $catName, 驼峰法一般就指小驼峰]
/*	class Cat{
		public $name;
		public $age;
		public $sex;
	}
//(2.) 通过类来创建对应的对象实例/对象
	$cat1 = new Cat();
	$cat2 = new Cat();
//(3.) 给对象赋值
	$cat1->name = "小宝";
	$cat2->name = "加肥";
//查看对象实例的区别
	var_dump($cat1,$cat2);

	class Dog{
	}
	$dog1 = new Dog();
	var_dump($dog1);
*/
//说明:上面代码可以看出:
//1.一个类可以创建多个对象(或实例化多个对象或把类实例化);
//2.不同的对象实例化后有不同的标识符#,按编号顺序由系统分配;
/***************************************
类与对象区别
1.类是抽象的,概念的,代表一类事物,比如人,动物;
2.对象是具体的,实际的,代表一个具体事物,比如说植物类中的向日葵就是一个对象;
3.类就是对象的模版,对象就是类的一个个体实例;
***************************************/
/*---------------------------------------
最简单类定义(后面慢慢补充完毕):
	class 类名{
		访问修饰符 成员属性1;
		访问修饰符 成员属性2;
		访问修饰符 成员属性3;
		....
	}
----------------------------------------*/

/******************************************
没有给成员属性初始值则默认是:  null;
类名不区分大小写
看文档有更多使用说明
******************************************/
/*	class Person{
		public $name;
		public $age;
		public $sex;
		public $salary;
		public $hobby;
		public $lover;
	}
	$p1 = new Person();
	$p2 = new Person();
	$p2->name = '双儿';
	$p2->age = 24;
	$p2->sex = '女';
	$p2->salary = 4987.56;
	$p2->hobby = array('旅游','游泳','玩自拍');
	$p2->lover = $p1;
	$p1->name = '韦小宝';
	$p1->age = 28;
	$p1->sex = '男';
	$p1->salary = 6987.56;
	$p1->hobby = array('旅游','泡妞','玩游戏');
	$p1->lover = $p2;
	echo '<pre>';
	echo $p1->hobby[2];
	echo $p1->lover->name;
*/
//访问对象中的复合类型的成员属性(成员属性可以是任意数据类型包括资源类型与对象类型);
/*****************************************
严格的按照命名规范走!!!!!!
*****************************************/

/*********对象传递的方式****************/
//对象属性传递是内存中堆区的地址

	class Person{
		public $name;
		public $age;
	}

	$p1 = new Person();

	$p1->name = '金角大王';
	$p1->age = 250;

//	$p2 = $p1;
	$p2 = &$p1;
	
	echo '<pre>';
	$p2 = '银角大王';
	echo $p1->name;
	echo $p2;
/****************************************
//unset()干掉的是变量本身,不是地址
//$p2 = &$p1 与$p2 = $p1 区别:
//$p2 = &$p1 是$p2 将指向$p1存放地址的空间
//$p2 = $p1 是$p2重新在栈区开辟个空间存放从$p1复制过来地址
*****************************************/
?>