<?php
/******************** MySQL *******************************
一.数据库的介绍
	1.数据库:
		存储的数据的一个永久空间;就是通过一种特殊的方式(数据库)存储到硬盘中.
		计算机->硬盘<-的-空间-是永久空间;
		计算机->内存-<空间是临时空间
	2.关系型数据库与非关系型数据库
		关系型数据库所有的数据基本上都是有关联的,通过一个数据和其它的一个数据进行有效的关联.(MySQL)
		ORACLE(超大型数据库)

		DBA:数据库管理员

	3.数据库--数据库管理系统(DBMS)-->mysql
		
		MySQL查看数据的方式为:结构化查询语言(SQL语句)

	4.数据库的基本结构: C/S
	开发方式分: B/S, C/S
	数据库客户端(软件)
	数据库管理系统(软件)
	数据(文件)

二. MySQL 的基本语法
	1.注释:
		1.1. 单行注释:	#注释内容 或者 -- 注释内容(--后有空格)
		1.2. 多行注释:	/*注释内容*/
	2.语句行:
		2.1. 一条语句也称为一条命令,通常用一个分号(;)结束,也可以通过"delimiter 新结束符" 命令来设定新的结束符;
		2.2 语句执行是以一条语句为单位进行,一次执行一条语句;
	3.大小写:
		3.1: MySQL 不区分大小写(各种关键字与命令本身)
		3.2: MySQL 中自定义名称(标识符)的大小写问题,有的区分;(与操作系统有关),有的不区分,"命名规则"将详细解答;
		--windows不区分,linux是区分的;
	4.命名(标识符)规则:
		4.1 可以自己命名,这样产生的名字为标识符. 包括: 数据库名,表明,字段名,视图名,函数名,过程名,变量名,用户名..等等;
		4.2 可以命名标识符的字符比常规语言多,新手只建议:字母数字,下划线,不要用数字开头;
		4.3 不推荐使用非常规的字符或系统的关键字作为标识符,如果使用了请包在反引号(数字1左边有`)``中;
		4.4. 对其它自己命名的标识符(字段名,函数名,过程名),不区分大小写,建议全用小写,并用下划线隔开; 
		4.5. 对数据库名,表明,视图名,在windows中不区分大小写,其它系统区分(linux),简易全用小写,并用下划线隔开

三.库操作
	库:存储数据的仓库--起名称;
	表:存储数据的表,一个库可以创建多个表----起名称;
	字段: 给表中的数据起名称;
	记录: 具体的一条数据;

	1.创建数据库:
		语句: creat database 数据库名 库选项;
		库选项: 字符集(utf8),校对集
		查看校对集: show collation; 
		查看字符集: show charset; 

		举例:	create database php07 charset utf8;
	2.查询所有数据库
		语句: show databases;
	3.查询数据库创建语句
		语句: show create database 数据库名;
		举例:  show create database php07;
	4.修改数据库
		说明: 不能修改数据库的名称,只能修改(选项)字符集和校对集
		语句: alter database 数据库名 charset=新字符集 collate=新校对集;

		查看校对集: show collation; 
		查看字符集: show charset; 
		注意: 字符集和校对集可以分开修改,新手建议必须一起修改!!!!!!
	5.删除数据库
		语句: drop database 数据库名;
		举例: drop database php07;
		
	6.选择数据库
		语句: use 数据库名;
		举例: use `my_house`;
		
		
四.表操作
	1.创建表
		语句: create table 表名(				//表名不要被``包起来
			字段名称 1 字段属性(类型) 字段选项,
			字段名称 2 字段属性(类型) 字段选项,
				........................
			)表选项;

			表选项: 表字符集和数据引擎
				字符集: charset=utf8;
				数据引擎: 默认是 innodb, engine=数据引擎名;

			字段: 当前表中的数据名称,自定义就可以了,但是要使用单词(不然数据多了你就惨了);
			字段类型: 当前字段中存储的数据类型必须是一开始就指定好的;
			字段选项: 设置当前字段的一些信息--比如-->是否可以为空,是否是主键,是否是唯一键,是否加备注;

				null | not null	: 是否可以为空;
				Default: 是否有默认值;
				auto_increment: 是否可以自动增长,必须是数字; 例如--> 需要给每条数据一个编号,原因是数据内容可以重复,但是编号(位置)不能重复.
				Primary key: 设置主键,数据内容不能重复,在查询数据时是主查询条件,一个表中一个主键,一般是id(唯一性,不能为空);
				unique [key]: 设定唯一(键),即表中所有行的数据在该字段的值不能重复;
				comment: 设置备注,给当前字段设置说明;

	2.数据类型:(数据库优化使用)
		数值型: 存储的数值大小不一样,默认有符号(一般使用是无符号的)
			整数: tinyint(1字节),smallint(2字节),int(4字节)
		举例:
----------------------------------------------------------------
	-- *****无符号创建
	create table my_house_number2(
		num1 tinyint unsigned not null comment'占用1字节',
		num2 smallint unsigned not null  comment'占用2字节',
		num3 int unsigned not null comment'占用4个字节'
	)charset=utf8;
	-- *****有符号创建
	create table my_house_number2(
		num1 tinyint not null comment'占用1字节',
		num2 smallint not null  comment'占用2字节',
		num3 int not null comment'占用4个字节'
	)charset=utf8;


	insert into my_house_number2(num1,num2,num3) values(255,65535,4294967295);

 select * from my_house_number2;
+------+-------+------------+
| num1 | num2  | num3       |
+------+-------+------------+
|  255 | 65535 | 4294967295 |
+------+-------+------------+
1 row in set (0.00 sec)

----------------------------------------------------------------
			小数: float, decimal
				float, 范围大约是-3.4E+38到-1.1E-38(有符号), 0和1.1E-38到3.4E+38;
				Decimal: 定点型
					Decima(10,2): 长度10位.其中小数
					2位	;
				举例:
---------------------------------------------------------------------------------
					-- **小数类型
					-- *****无符号创建
					create table my_house_number1(
					num1 float unsigned not null comment'不指定小数位数',
					num2 decimal(10,2) unsigned not null  comment'指定小数位数'
					)charset=utf8;
					-- *****有符号创建
				create table my_house_number2(
					num1 float not null comment'不指定小数位数',
					num2 decimal(10,2) not null  comment'指定小数位数'
					)charset=utf8;

mysql> insert into my_house_number1(num1,num2) values(0.16888,99.00);
Query OK, 1 row affected (0.04 sec)

mysql> select * from my_house_number1;
+---------+-------------+
| num1    | num2        |
+---------+-------------+
| 0.16888 | 99999999.00 |
| 0.16888 |       99.00 |
+---------+-------------+
2 rows in set (0.00 sec)

				
---------------------------------------------------------------------------------

			


		字符串:
			char--------|==>最大255字符(1字节)
			varchar-----|==>最大65532字符(2字节)
			text--------|==>不受行的最大限制(同类有tinytext,mediuntext,longtext)

			char与varchar的区别: 定长型和变长型
			char: 定长型,固定的长度,如: char(30),最大存储30的长度,如果没有写入30长度,就用空格补齐;
			varchar: 变长型, 可以变化长度,如: varchar(30),最大存储30的长度,如果没有写入30长度,写入多少就占多少位;

			举例:
--------------------------------------------------------------------------------
-- 创建一个存储字符串的表

-- *****char,varchar,text
	create table my_house_string(
		name char(10) not null comment'名字',
		sex varchar(10)  not null  comment'性别',
		remark text not null comment'备注'
	)charset=utf8;


	insert into my_house_string(name,sex,remark) values('jerry','man','I am good man');
	insert into my_house_string(name,sex,remark) values('李连杰','男','著名动作巨星');

+-----------+-----+--------------------+
| name      | sex | remark             |
+-----------+-----+--------------------+
| jerry     | man | I am good man      |
| 李连杰    | 男  | 著名动作巨星       |
+-----------+-----+--------------------+
2 rows in set (0.00 sec)
---------------------------------------------------------------------------------
		日期时间:
			date 类型: 支持的范围是'1000-01-01'到'9999-12-31' ;
			datetime 类型:支持的范围是'1000-01-01 00:00:00' 到 '9999-12-31 23-59-59' ;

			举例:
---------------------------------------------------------------------------------- 创建一个存储时间日期的表

-- *****date,datetime
	create table my_house_mydate(
		add_date date not null comment'添加日期',
		add_time datetime  not null  comment'添加时间'
	)charset=utf8;

	 insert into my_house_mydate(add_date,add_time) values('2017-12-18','2017-12-18 00:37:54');

 mysql> select * from my_house_mydate;
+------------+---------------------+
| add_date   | add_time            |
+------------+---------------------+
| 2017-12-08 | 2017-12-18 00:37:54 |
| 2017-12-18 | 2017-12-18 00:37:54 |
+------------+---------------------+
2 rows in set (0.00 sec)


2.删除表
	语句: drop table 表名;
	举例:
----------------------------------------------------
	mysql> drop table php07_stu;
	Query OK, 0 rows affected (0.34 sec)

----------------------------------------------------

3.查看所有表;	
	语句: show tables;
	举例:
----------------------------------------------------------
mysql> show tables;
+--------------------+
| Tables_in_my_house |
+--------------------+
| my_house_mydate    |
| my_house_number    |
| my_house_number1   |
| my_house_number2   |
| my_house_string    |
| my_house_student   |
+--------------------+
6 rows in set (0.01 sec)

------------------------------------------------------------

4.查看表结构: 
	语句: desc 表名;
	举例:
-------------------------------------
mysql> desc my_house_student;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| id    | int(11)     | NO   | PRI | NULL    | auto_increment |
| name  | varchar(10) | NO   |     |         |                |
| age   | int(11)     | NO   |     | 0       |                |
| sex   | varchar(5)  | NO   |     | 男      |                |
+-------+-------------+------+-----+---------+----------------+
4 rows in set (0.06 sec)
------------------------------------------
	Field: 字段名称;
	Type: 字段类型;
	Null: 是否为空;
	Key: 索引;
	Default: 默认值;
	Extra: 其它信息;

5.产看创建表的语句
	语句: show create table 表名;
	举例:
-----------------------------------------------
mysql> show create table my_house_student;
+------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table            | Create Table                                                                                                                                                                                                                                                                                                                      |
+------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| my_house_student | CREATE TABLE `my_house_student` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id号',
  `name` varchar(10) NOT NULL DEFAULT '' COMMENT '姓名',
  `age` int(11) NOT NULL DEFAULT '0' COMMENT '年龄',
  `sex` varchar(5) NOT NULL DEFAULT '男' COMMENT '性别',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8         |
+------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

-------------------------------------------------------------------------------

5.修改表
	
	修改表名: alter table 旧表名 rename [to] 新表名;
	举例:

------------------------------------------
mysql> alter table my_house_student rename NB_NMB;
Query OK, 0 rows affected (0.17 sec)

mysql> show tables;
+--------------------+
| Tables_in_my_house |
+--------------------+
| my_house_mydate    |
| my_house_number    |
| my_house_number1   |
| my_house_number2   |
| my_house_string    |
| nb_nmb             |
+--------------------+
6 rows in set (0.00 sec)
-------------------------------------------

6.修改表选项
	语句: alter table 表名 选项名1=选项值1, 选项名2=选项值2..............;
	!!!不建议使用


7.添加新字段
	语句: alter table 表名 add 新字段 字段类型 字段选项;
	
	举例
---------------------------------------------------------------------------
	mysql> desc my_house_string;
+--------+--------------+------+-----+---------+-------+
| Field  | Type         | Null | Key | Default | Extra |
+--------+--------------+------+-----+---------+-------+
| name   | char(10)     | NO   |     | NULL    |       |
| sex    | varchar(10)  | NO   |     | NULL    |       |
| remark | text         | NO   |     | NULL    |       |
| want   | varchar(100) | NO   |     | 做梦    |       |
+--------+--------------+------+-----+---------+-------+
4 rows in set (0.02 sec)

----------------------------------------------------------------------------------

8.修改表字段(包括字段名)
	语句: alter table 表名 change 旧字段名 新字段名 新字段类型 新字段选项;
	举例:

-----------------------------------------------------
mysql> alter table my_house_string change want dreame char(120) not null default '大牛' comment '梦想';
Query OK, 2 rows affected (0.67 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> desc my_house_string;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| name   | char(10)    | NO   |     | NULL    |       |
| sex    | varchar(10) | NO   |     | NULL    |       |
| remark | text        | NO   |     | NULL    |       |
| dreame | char(120)   | NO   |     | 大牛    |       |
+--------+-------------+------+-----+---------+-------+
4 rows in set (0.01 sec)	
-----------------------------------------------------

9.修改字段(不修改名,只修改类型选项)
	
	语句: alter table modify 字段名 新的字段类型 新的字段选项;

	举例: 
---------------------------------------------------------------------
mysql> alter table my_house_string modify dreame varchar(200) not null default '牛鼻的人' comment '灼灼梦想';
Query OK, 2 rows affected (0.76 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> desc my_house_string;
+--------+--------------+------+-----+--------------+-------+
| Field  | Type         | Null | Key | Default      | Extra |
+--------+--------------+------+-----+--------------+-------+
| name   | char(10)     | NO   |     | NULL         |       |
| sex    | varchar(10)  | NO   |     | NULL         |       |
| remark | text         | NO   |     | NULL         |       |
| dreame | varchar(200) | NO   |     | 牛鼻的人     |       |
+--------+--------------+------+-----+--------------+-------+
4 rows in set (0.00 sec)
---------------------------------------------------------------------

10.删除字段
	语句: alter table 表名 drop [column] 字段名;
	举例:

------------------------------------------------------------------
mysql> alter table my_house_string drop remark;
Query OK, 0 rows affected (0.50 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc my_house_string;
+--------+--------------+------+-----+--------------+-------+
| Field  | Type         | Null | Key | Default      | Extra |
+--------+--------------+------+-----+--------------+-------+
| name   | char(10)     | NO   |     | NULL         |       |
| sex    | varchar(10)  | NO   |     | NULL         |       |
| dreame | varchar(200) | NO   |     | 牛鼻的人     |       |
+--------+--------------+------+-----+--------------+-------+
3 rows in set (0.00 sec)

mysql> select * from my_house_string;
+-----------+-----+--------+
| name      | sex | dreame |
+-----------+-----+--------+
| jerry     | man | 做梦   |
| 李连杰    | 男  | 做梦   |
+-----------+-----+--------+
2 rows in set (0.00 sec)
------------------------------------------------------------------


********************设计表三性:原子,唯一,独立**************************************
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

五.数据的操作

1.插入数据
	
	语句: insert into 表名[(字段1,字段2...)] values(值1,值2,值3);
	举例:
-----------------------------------------------------------------------------------
mysql> insert into my_house_string (name,sex,dreame) values('我爱罗','男','成为第五代风影');
Query OK, 1 row affected (0.06 sec)

mysql> select * from my_house_string;
+-----------+-----+-----------------------+
| name      | sex | dreame                |
+-----------+-----+-----------------------+
| jerry     | man | 做梦                  |
| 李连杰    | 男  | 做梦                  |
| 我爱罗    | 男  | 成为第五代风影        |
+-----------+-----+-----------------------+
3 rows in set (0.00 sec)

mysql> insert into my_house_string(name,sex,dreame) values('白','null','变成一把有用的武器');
Query OK, 1 row affected (0.04 sec)

mysql> select * from my_house_string;
+-----------+------+-----------------------------+
| name      | sex  | dreame                      |
+-----------+------+-----------------------------+
| jerry     | man  | 做梦                        |
| 李连杰    | 男   | 做梦                        |
| 我爱罗    | 男   | 成为第五代风影              |
| 白        | null | 变成一把有用的武器          |
+-----------+------+-----------------------------+
4 rows in set (0.00 sec)
-----------------------------------------------------------------------------------

一次性插入多行数据:
	语法: insert into 表名[(字段列表)] values (第一条数据),(第二条数据),.....;
	举例:
-----------------------------------------------------
mysql> insert into my_house_string(name,sex,dreame) values
    -> ('小智','男','葫芦岛扛把子'),
    -> ('小苍','女','超越苍井空'),
    -> ('小莫','男','爆小智菊花');
Query OK, 3 rows affected (0.05 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> select * from my_house_string;
+-----------+------+-----------------------------+
| name      | sex  | dreame                      |
+-----------+------+-----------------------------+
| jerry     | man  | 做梦                        |
| 李连杰    | 男   | 做梦                        |
| 我爱罗    | 男   | 成为第五代风影              |
| 白        | null | 变成一把有用的武器          |
| 小智      | 男   | 葫芦岛扛把子                |
| 小苍      | 女   | 超越苍井空                  |
| 小莫      | 男   | 爆小智菊花                  |
+-----------+------+-----------------------------+
7 rows in set (0.00 sec)
-----------------------------------------------------

***多行插入时,字段列表可以省略: 省略后的数据必须对应创建时的字段列表*******
	语句: insert into 表名[(字段列表)] values (第一条数据),(第二条数据),.....;
	举例:

mysql> insert into my_house_string values
    -> ('毛泽东','男','祖国富强'),
    -> ('邓小平','男','改革开放利国利民'),
    -> ('周恩来','男','人民好总理');
Query OK, 3 rows affected (0.05 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> select * from my_house_string;
+-----------+------+-----------------------------+
| name      | sex  | dreame                      |
+-----------+------+-----------------------------+
| jerry     | man  | 做梦                        |
| 李连杰    | 男   | 做梦                        |
| 我爱罗    | 男   | 成为第五代风影              |
| 白        | null | 变成一把有用的武器          |
| 小智      | 男   | 葫芦岛扛把子                |
| 小苍      | 女   | 超越苍井空                  |
| 小莫      | 男   | 爆小智菊花                  |
| 毛泽东    | 男   | 祖国富强                    |
| 邓小平    | 男   | 改革开放利国利民            |
| 周恩来    | 男   | 人民好总理                  |
+-----------+------+-----------------------------+
10 rows in set (0.00 sec)
************************************

*-*-*-*-*-*-*-*-字段列表可以选择性的写:写几个数据对应几个字段列表 *-*-*-*-*-*-*-
	举例:
mysql> alter table my_house_string modify sex varchar(40) default '求插入' comment'性别';
Query OK, 0 rows affected (0.63 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> insert into my_house_string(name,dreame) values
    -> ('哈哈','笑的心行'),
    -> ('呵呵','表示鄙视');
Query OK, 2 rows affected (0.04 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> select * from my_house_string;
+-----------+-----------+-----------------------------+
| name      | sex       | dreame                      |
+-----------+-----------+-----------------------------+
| jerry     | man       | 做梦                        |
| 李连杰    | 男        | 做梦                        |
| 我爱罗    | 男        | 成为第五代风影              |
| 白        | null      | 变成一把有用的武器          |
| 小智      | 男        | 葫芦岛扛把子                |
| 小苍      | 女        | 超越苍井空                  |
| 小莫      | 男        | 爆小智菊花                  |
| 毛泽东    | 男        | 祖国富强                    |
| 邓小平    | 男        | 改革开放利国利民            |
| 周恩来    | 男        | 人民好总理                  |
| 哈哈      | 求插入    | 笑的心行                    |
| 呵呵      | 求插入    | 表示鄙视                    |
+-----------+-----------+-----------------------------+
12 rows in set (0.00 sec)

-----------------------------------------------------------------------------------

2.删除数据
	语句: delete from 表名 [where条件] [order排序] [limit限定];
	where条件必须添加,否则删除所有数据!!!!!!!!!!!!!!!建议id,id唯一性;
	删除大范围的数据使用瞎买
	oorder:当前表倒序还是正序,一般不添加
	limit: 限定范围,一般不添加
*************************************

	举例1:
mysql> insert into newhouse(name,age,sex) values
    -> ('李四',22,'男'),
    -> ('王五',25,'男'),
    -> ('王钢蛋',24,'女'),
    -> ('张晓翠',27,'女');
Query OK, 4 rows affected (0.03 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> select * from newhouse;
+----+-----------+-----+-----+
| id | name      | age | sex |
+----+-----------+-----+-----+
|  1 | 李四      |  22 | 男  |
|  2 | 王五      |  25 | 男  |
|  3 | 王钢蛋    |  24 | 女  |
|  4 | 张晓翠    |  27 | 女  |
+----+-----------+-----+-----+
4 rows in set (0.00 sec)

mysql> delete from newhouse where id=1;
Query OK, 1 row affected (0.07 sec)

mysql> select * from newhouse;
+----+-----------+-----+-----+
| id | name      | age | sex |
+----+-----------+-----+-----+
|  2 | 王五      |  25 | 男  |
|  3 | 王钢蛋    |  24 | 女  |
|  4 | 张晓翠    |  27 | 女  |
+----+-----------+-----+-----+
3 rows in set (0.00 sec)

************************************
倒序显示表数据-->select * from newhouse order by id desc limit 0,100;
(超过总数就全部显示)

删除指定区域数据(order与limit的使用)


	举例:(通过倒序删除)
mysql> delete from newhouse order by id desc;
Query OK, 3 rows affected (0.04 sec)

mysql> select * from newhouse;
Empty set (0.00 sec)

***普通删除后会保留删除的id号,不让占用!!!
采用这种方式会从头再来
	truncate 
	语句: truncate [table] 表名; 用于直接删除整个表(结构)并重新创建该表


************************************************

3.修改数据
	语句: update 表名 set 字段名1=数值表达式1, 字段名2=数值表达式2, 字段名3=数值表达式3, ....[where条件] [oreder排序][limit限定];


**********************************************************************************************


4.查询数据
	查询数据只有两种结果:true(1)--有数据 或 false(0)--没有数据

	语句: select 字段列表 [from子句] [where子句] [group by 子句] [having子句] [order by子句] [limit 子句];

	基础查询------查询所有数据及字段
		select * from 表名;
		举例:
**********************************************
mysql> select * from newhouse_p;
+----+------------+-------------+
| id | user       | password    |
+----+------------+-------------+
|  4 | 767829413  | 6217512f    |
|  5 | 1079729541 | 6040993f    |
|  6 | 2436347822 | 6217512fang |
|  7 | 767829413  | 6217512f    |
|  8 | 1079729541 | 6040993f    |
|  9 | 2436347822 | 6217512fang |
+----+------------+-------------+
6 rows in set (0.00 sec)
**********************************************

	基础查询---查询某些字段

	select 字段名称1,字段名称2 from 表名;
	举例:
----------------------------------------------
mysql> select user,password from newhouse_p;
+------------+-------------+
| user       | password    |
+------------+-------------+
| 767829413  | 6217512f    |
| 1079729541 | 6040993f    |
| 2436347822 | 6217512fang |
| 767829413  | 6217512f    |
| 1079729541 | 6040993f    |
| 2436347822 | 6217512fang |
+------------+-------------+
6 rows in set (0.00 sec)
----------------------------------------------

	基础查询---别名
	比如查询数据的数据量(以id为例): select count(id) from newhouse_p;
	字段名 as 别名: select count(id) as number from newhouse_p;
	举例:
*****************************************
sql> select count(id) from newhouse_p;
+-----------+
| count(id) |
+-----------+
|         6 |
+-----------+
1 row in set (0.01 sec)

mysql> select count(user) from newhouse_p;
+-------------+
| count(user) |
+-------------+
|           6 |
+-------------+
1 row in set (0.00 sec)

mysql> select count(id) as sum from newhouse_p;
+-----+
| sum |
+-----+
|   6 |
+-----+
1 row in set (0.01 sec)
*******************************************
	
	from 子句: 表示从哪个(或哪些)表中取出数据.也可以从多表中查询数据;
		多表查询与连接查询



------------------------------------------where---------------------------------------------------

	where: 给条件的查询 
		算数运算符: + - * / %
		
**********举例*******************
mysql> select
    -> * from newhouse_p;
+----+------------+-------------+
| id | user       | password    |
+----+------------+-------------+
|  4 | 767829413  | 6217512f    |
|  5 | 1079729541 | 6040993f    |
|  6 | 2436347822 | 6217512fang |
|  7 | 767829413  | 6217512f    |
|  8 | 1079729541 | 6040993f    |
|  9 | 2436347822 | 6217512fang |
+----+------------+-------------+
6 rows in set (0.00 sec)

mysql> select * from newhouse_p where id=1+6;
+----+-----------+----------+
| id | user      | password |
+----+-----------+----------+
|  7 | 767829413 | 6217512f |
+----+-----------+----------+
1 row in set (0.00 sec)
**********************************

		
		
		比较运算符: < > =  <= >= !=  <>(不等于)	

**********举例*******************
mysql> select * from newhouse_p where id<=6;
+----+------------+-------------+
| id | user       | password    |
+----+------------+-------------+
|  4 | 767829413  | 6217512f    |
|  5 | 1079729541 | 6040993f    |
|  6 | 2436347822 | 6217512fang |
+----+------------+-------------+
3 rows in set (0.01 sec)

*********************************


		逻辑运算符: and(&&) or(||) not(!) 数据库建议用单词

**********举例*******************
mysql> select * from newhouse_p where id<8 and id>5;
+----+------------+-------------+
| id | user       | password    |
+----+------------+-------------+
|  6 | 2436347822 | 6217512fang |
|  7 | 767829413  | 6217512f    |
+----+------------+-------------+
2 rows in set (0.00 sec)

mysql> select * from newhouse_p where id>4 or user='2436347822';
+----+------------+-------------+
| id | user       | password    |
+----+------------+-------------+
|  5 | 1079729541 | 6040993f    |
|  6 | 2436347822 | 6217512fang |
|  7 | 767829413  | 6217512f    |
|  8 | 1079729541 | 6040993f    |
|  9 | 2436347822 | 6217512fang |
+----+------------+-------------+
5 rows in set (0.00 sec)

mysql> select * from newhouse_p where not user='2436347822';
+----+------------+----------+
| id | user       | password |
+----+------------+----------+
|  4 | 767829413  | 6217512f |
|  5 | 1079729541 | 6040993f |
|  7 | 767829413  | 6217512f |
|  8 | 1079729541 | 6040993f |
+----+------------+----------+
4 rows in set (0.00 sec)

mysql> select * from newhouse_p where not id>=7;
+----+------------+-------------+
| id | user       | password    |
+----+------------+-------------+
|  4 | 767829413  | 6217512f    |
|  5 | 1079729541 | 6040993f    |
|  6 | 2436347822 | 6217512fang |
+----+------------+-------------+
3 rows in set (0.00 sec)

mysql> select * from newhouse_p where not id%2=0;
+----+------------+-------------+
| id | user       | password    |
+----+------------+-------------+
|  5 | 1079729541 | 6040993f    |
|  7 | 767829413  | 6217512f    |
|  9 | 2436347822 | 6217512fang |
+----+------------+-------------+
3 rows in set (0.02 sec)
*********************************

		in: 单独查询某些数据
			字段名 in (值1,值2,....)


**********举例*******************
mysql> select * from newhouse_p where id in (4,7,9);
+----+------------+-------------+
| id | user       | password    |
+----+------------+-------------+
|  4 | 767829413  | 6217512f    |
|  7 | 767829413  | 6217512f    |
|  9 | 2436347822 | 6217512fang |
+----+------------+-------------+
3 rows in set (0.01 sec)
*********************************

			between 语法 字段名 between 小值 and 大值 (表示该字段值在给定的两值之间,包含这两个值)

**********举例*******************
mysql> select * from newhouse_p where id between 4 and 8;
+----+------------+-------------+
| id | user       | password    |
+----+------------+-------------+
|  4 | 767829413  | 6217512f    |
|  5 | 1079729541 | 6040993f    |
|  6 | 2436347822 | 6217512fang |
|  7 | 767829413  | 6217512f    |
|  8 | 1079729541 | 6040993f    |
+----+------------+-------------+
5 rows in set (0.02 sec)
*********************************

		like: 
			字段名 like '查询的字符';	直接写字符,则配置查询自负必须一致
**********举例*******************
mysql> select * from my_house_string where name like '小苍';
+--------+------+-----------------+
| name   | sex  | dreame          |
+--------+------+-----------------+
| 小苍   | 女   | 超越苍井空      |
+--------+------+-----------------+
1 row in set (0.00 sec)
*********************************
			字段名 like '%查询的字符%';	匹配对应的其它字符,%是匹配任何字符,一般前后都加
			(如果用%包围查找字符,则匹配所有含该自负的数据,如果放在字符前,则匹配所有该字符位置前的数据,放在字符后不会匹配)--->模糊查询<---
**********举例*******************

mysql> select * from my_house_string where name like '%小%';
+-----------+------+--------------------------+
| name      | sex  | dreame                   |
+-----------+------+--------------------------+
| 小智      | 男   | 葫芦岛扛把子             |
| 小苍      | 女   | 超越苍井空               |
| 小莫      | 男   | 爆小智菊花               |
| 邓小平    | 男   | 改革开放利国利民         |
+-----------+------+--------------------------+
4 rows in set (0.00 sec)

mysql> select * from my_house_string where name like '小%';
+--------+------+--------------------+
| name   | sex  | dreame             |
+--------+------+--------------------+
| 小智   | 男   | 葫芦岛扛把子       |
| 小苍   | 女   | 超越苍井空         |
| 小莫   | 男   | 爆小智菊花         |
+--------+------+--------------------+
3 rows in set (0.00 sec)

mysql> select * from my_house_string where name like '%小';
Empty set (0.00 sec)
*********************************
---------------------------------group-----------------------------------------------------------	
		group by字句: 分组
		注意:分组只能是分组后的数量而不能是分组后信息.
		具体用法:
			select 字段或聚合数据(函数) from 表名 group by 分组字段;
	常用的聚合函数有:取平均值avg();取个数count();取总和sum();取最大值max();取最小值min();
**********举例*******************
mysql> select count(sex) as sex from my_house_string group by sex having sex < 6;
+-----+
| sex |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   7 |
+-----+
5 rows in set, 7 warnings (0.00 sec)

mysql> select count(sex) as sexnum from my_house_string group by sex having sexnum > 6;
+--------+
| sexnum |
+--------+
|      7 |
+--------+
1 row in set (0.00 sec)
*********************************

****************************************order************************************************
	order by: 排序
		分: 正序asc 倒序(desc)
		select * from 表名 group by 字段名 asc|desc limit;

**********举例*******************
mysql> select * from list group by id desc;
+----+---------------------------------------------+-----------------+----------------+----------------+---------------+
| id | product_name                                | product_brand   | product_number | product_origin | product_price |
+----+---------------------------------------------+-----------------+----------------+----------------+---------------+
|  9 | 联想(Lenovo) 双卡双待手机                   | 联想(Lenovo)    |              2 | 北京           |           988 |
|  8 | 索尼(SONY) 4G手机(黑色)                     | 索尼(SONY)      |              2 | 深圳           |          3238 |
|  7 | 惠普(HP) 黑白激光打印机                     | 惠普(HP)        |              3 | 天津           |          1169 |
|  6 | 联想(Lenovo) 14.0英寸笔记本电脑             | 联想(Lenovo)    |              3 | 北京           |          2999 |
|  5 | 索尼(SONY) 13.3英寸触控超级本               | 索尼(SONY)      |              1 | 天津           |         11499 |
|  4 | 联想(Lenovo) 14.0英寸笔记本电脑             | 联想(Lenovo)    |              1 | 北京           |          5499 |
|  3 | 索尼(SONY) 60英寸全高清电视                 | 索尼(SONY)      |              1 | 北京           |          6999 |
|  2 | 海信(Hisense) 55英寸智能电视                | 海信(Hisense)   |              1 | 青岛           |          4199 |
|  1 | 康佳(KONKA) 42英寸全高清液晶电视            | 康佳(KONKA)     |              1 | 深圳           |          1999 |
+----+---------------------------------------------+-----------------+----------------+----------------+---------------+
9 rows in set (0.01 sec)
*********************************

***********************************************************limit**********************************************************
				limit 分页查询
					语句: select * from 表名 limit number1,number2;
					说明:
						number1: 开始数据时的下标;
						number2: 每次显示的数量;
**********************举例*****************
mysql> select * from list limit 0,3;
+----+---------------------------------------------+-----------------+----------------+----------------+---------------+
| id | product_name                                | product_brand   | product_number | product_origin | product_price |
+----+---------------------------------------------+-----------------+----------------+----------------+---------------+
|  1 | 康佳(KONKA) 42英寸全高清液晶电视            | 康佳(KONKA)     |              1 | 深圳           |          1999 |
|  2 | 海信(Hisense) 55英寸智能电视                | 海信(Hisense)   |              1 | 青岛           |          4199 |
|  3 | 索尼(SONY) 60英寸全高清电视                 | 索尼(SONY)      |              1 | 北京           |          6999 |
+----+---------------------------------------------+-----------------+----------------+----------------+---------------+
3 rows in set (0.00 sec)

mysql> select * from list limit 3,6;
+----+------------------------------------------+----------------+----------------+----------------+---------------+
| id | product_name                             | product_brand  | product_number | product_origin | product_price |
+----+------------------------------------------+----------------+----------------+----------------+---------------+
|  4 | 联想(Lenovo) 14.0英寸笔记本电脑          | 联想(Lenovo)   |              1 | 北京           |          5499 |
|  5 | 索尼(SONY) 13.3英寸触控超级本            | 索尼(SONY)     |              1 | 天津           |         11499 |
|  6 | 联想(Lenovo) 14.0英寸笔记本电脑          | 联想(Lenovo)   |              3 | 北京           |          2999 |
|  7 | 惠普(HP) 黑白激光打印机                  | 惠普(HP)       |              3 | 天津           |          1169 |
|  8 | 索尼(SONY) 4G手机(黑色)                  | 索尼(SONY)     |              2 | 深圳           |          3238 |
|  9 | 联想(Lenovo) 双卡双待手机                | 联想(Lenovo)   |              2 | 北京           |           988 |
+----+------------------------------------------+----------------+----------------+----------------+---------------+
6 rows in set (0.00 sec)

mysql> select * from list limit 3,3;
+----+------------------------------------------+----------------+----------------+----------------+---------------+
| id | product_name                             | product_brand  | product_number | product_origin | product_price |
+----+------------------------------------------+----------------+----------------+----------------+---------------+
|  4 | 联想(Lenovo) 14.0英寸笔记本电脑          | 联想(Lenovo)   |              1 | 北京           |          5499 |
|  5 | 索尼(SONY) 13.3英寸触控超级本            | 索尼(SONY)     |              1 | 天津           |         11499 |
|  6 | 联想(Lenovo) 14.0英寸笔记本电脑          | 联想(Lenovo)   |              3 | 北京           |          2999 |
+----+------------------------------------------+----------------+----------------+----------------+---------------+
3 rows in set (0.00 sec)

********************************************************


?> 